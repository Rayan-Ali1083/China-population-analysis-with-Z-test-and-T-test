# -*- coding: utf-8 -*-
"""Stats project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H94vvOWi1izxT3YwvlSPYFDqdm7j7sip
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from scipy.interpolate import make_interp_spline

from google.colab import files
china_pop = files.upload()
pop_forcast = files.upload()
cities_pop = files.upload()

cp = pd.read_csv("china_population.csv")
cp_forecast = pd.read_csv("china_population_forecast.csv")
cities_pop = pd.read_csv("city_population_china.csv")
cp.head()

cp.drop(columns=["Year", "China Global Rank"]).describe()

table = pd.pivot_table(data=cp,values=["Yearly % Change", "Population"], index=["Year", "Migrants (net)"], sort=True)
print("Comparision between Migrants and Year against Popualtion and Yearly % Change\n\n")
table

x = cp["Year"]
y = cp["Population"]
plt.figure(figsize=(13, 7)) 
plt.xticks([1955, 1960,  1965,  1970,  1975,  1980,  1985,  1990,  1995,  2000,  2005,  2010,  2015,  2020])
plt.plot(x, y, color="orange", marker='*', linewidth=3, markersize=12, linestyle='dashed', markerfacecolor="red", markeredgecolor="red")

plt.xlabel("Years", size="x-large")
plt.ylabel("Population", size="x-large")
plt.suptitle("Population Trends In The Past 65 Years", fontsize=20)
plt.show()

# linear regression

from sklearn import linear_model

X = cp["Year"].values
Y = cp["Population"].values
X = X.reshape(-1, 1)
Y = Y.reshape(-1, 1)
lm = linear_model.LinearRegression()
model =lm.fit(X, Y)
print("Model Coefficient: " + str(model.coef_))
print("Model Intercept" + str(model.intercept_))
print("Model Score: "+ str(model.score(X, Y)))

plt.figure(figsize=(13, 7)) 
plt.scatter(x=X, y=Y, s=100, marker="+")
# plotting predicting line
plt.plot(X, model.predict(X), color="red", linewidth=2, linestyle="--")
plt.suptitle("Linear Regression Model on Population and Year")
plt.xlabel("Years")
plt.ylabel("Population")
plt.show()

data1 = cp.iloc[:9]               #2000 - 2020
data2 = cp.iloc[10:]              #1955 - 1995
fig = plt.figure(figsize=(15, 9))
data1 = data1["Population"]
data2 = data2["Population"]
np.warnings.filterwarnings('ignore', category=np.VisibleDeprecationWarning) 
#d = [data1, data2]

bp0 = plt.boxplot(data1, patch_artist=True, positions=[1], vert=False)
bp1 = plt.boxplot(data2, patch_artist=True, positions=[2], vert=False)

for box in bp0['boxes']:
    # change outline color
    box.set(color='yellow', linewidth=2)
    # change fill color
    box.set(facecolor = 'yellow' )
    # change hatch
    box.set(hatch = '-')

for box in bp1['boxes']:
    box.set(color='red', linewidth=5)
    box.set(facecolor = 'red' )

plt.ylabel("Years", size="x-large")
plt.xlabel("Population",  size="x-large")
plt.show()

x = cp["Year"]
y = cp["Fertility Rate"]
x = x.sort_values()
y = y.sort_values(ascending=False)
X_Y_Spline = make_interp_spline(x, y)
X_ = np.linspace(x.min(), x.max(), 500)
Y_ = X_Y_Spline(X_)
plt.figure(figsize=(13, 7))
plt.plot(x, y, color="#4DBEEE", marker='h', linewidth=3, markersize=12, linestyle='dashed', markerfacecolor="#EDB120", markeredgecolor="red")
plt.xlabel("Years", size="x-large")
plt.ylabel("Fertility Rate", size="x-large")
plt.suptitle("Fertility Rate Trends In The Past 65 Years", fontsize=20)
plt.xticks([1955, 1960,  1965,  1970,  1975,  1980,  1985,  1990,  1995,  2000,  2005,  2010,  2015,  2020])
plt.show()

plt.ylabel("Population increase rate")
plt.xlabel("Year")
x = cp["Year"]
plt.xticks([1955, 1960,  1965,  1970,  1975,  1980,  1985,  1990,  1995,  2000,  2005,  2010,  2015,  2020])
y = cp["Yearly % Change"]
a = plt.plot(x, y, marker=".", c="blue", linestyle="--", markerfacecolor="yellow",markeredgecolor="red", markersize=20)
plt.suptitle("Yearly % change in population", fontsize=20)
x_check = [1955, 2020]
y_check = [2.0, 0.39]
b = plt.plot(x_check , y_check, c="red", linestyle="--", alpha = 0.7)
plt.legend((a[0], b[0]), ("Yearly change", "Net change"))
plt.figure(figsize=(12, 7))
plt.show()

cp_forecast.sort_index(ascending=False, inplace=True)

cpa= pd.concat([cp_forecast, cp])

plt.figure(figsize=(13,7))
plt.plot(cpa['Year'], cpa['Population'], color='#EDB120')
plt.plot(cpa['Year'], cpa['Population'], 'o', color='r', markersize=10)
plt.xticks([1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050])
plt.xlabel('Year')
plt.ylabel('Population')

plt.title('Total population of China   (1955-2050)')
plt.show()

plt.figure(figsize=(13, 7))
plt.title("World Population Against China's Population", fontsize=24)
plt.xlabel("Years", fontsize=18)
plt.ylabel("Population", fontsize=18)

x1 = cp["Population"]
x2 = cp["World Population"]
plt.xticks([1960, 1970, 1980, 1990, 2000, 2010, 2020])
p1 = plt.plot(cp["Year"], x1, color="blue", linestyle="--", marker="^", markersize=10)
p2 = plt.plot(cp["Year"], x2, color="red", linestyle="-", marker="*", markersize=10)
plt.legend((p1[0], p2[0]), ("China Population", "World Population"))
plt.show()

temp = cp.drop(labels = ["Yearly Change","World Population", "Density (P/KmÂ²)", "Urban Pop %", "Urban Population", "Country's Share of World Pop",
                "China Global Rank"], axis=1)
corrMatrix = temp.corr()
sns.set(rc = {'figure.figsize':(15,8)})
sns.heatmap(corrMatrix, annot=True)
plt.show()

labels = cities_pop["City Name"]
pop = cities_pop['Population']
plt.pie(pop,autopct='%2.2f%%', pctdistance= 1 , labels = labels, radius=6, shadow=True, rotatelabels=True)

centre_circle = plt.Circle((0,0),0.70,fc='black')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.show()

print(cpa.skew())

data = cpa["Yearly Change"]

from scipy.stats import yeojohnson
yf_target, lam = yeojohnson(data)

# plt.hist(yf_target)
from scipy.stats import norm
# plt.hist(yf_target, color="red")
mu, std = norm.fit(yf_target)

# Plot the histogram.
plt.hist(yf_target, bins=25, density=True, alpha=0.6, color='g')

# Plot the PDF.
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, mu, std)
plt.plot(x, p, 'k', linewidth=2)
title = "Fit results: mu = %.2f,  std = %.2f" % (mu, std)
plt.title(title)

plt.show()


plt.show()

import statistics

print("Mean: " + str(yf_target.mean()))
print("Standard Deviation: " + str(statistics.stdev(yf_target)))

from statsmodels.stats.weightstats import ztest as ztest
alpha = 0.05
ztest_Score, p_value = ztest(yf_target, value=6000000, alternative="larger")
print("Z-VALUE: " + str(ztest_Score))
print("P-VALUE: " + str(p_value))

if(p_value < alpha):
  print("Reject Null Hypothesis")
else:
  print("Fail to Reject NUll Hypothesis")

from scipy.stats import ttest_1samp as ttest_1samp
ttest_Score, p_value = ttest_1samp(a=yf_target, popmean=6000000)

print("T-VALUE: " + str(ttest_Score))
print("P-VALUE: " + str(p_value))
alpha = 0.05

if(p_value < alpha):
  print("Reject Null Hypothesis")
else:
  print("Fail to Reject NUll Hypothesis")